package services

import (
	"context"
	"github.com/suzushin54/study-graphql-with-go/graph/db"
	"github.com/suzushin54/study-graphql-with-go/graph/model"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type userService struct {
	exec boil.ContextExecutor
}

func (u *userService) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	user, err := db.FindUser(ctx, u.exec, id, db.UserColumns.ID, db.UserColumns.Name)
	if err != nil {
		return nil, err
	}
	return convertUser(user), nil
}

func (u *userService) ListUsersByIDs(ctx context.Context, ids []string) ([]*model.User, error) {
	users, err := db.Users(
		qm.Select(db.UserTableColumns.ID, db.UserTableColumns.Name),
		db.UserWhere.ID.IN(ids),
	).All(ctx, u.exec)
	if err != nil {
		return nil, err
	}

	var result []*model.User
	for _, user := range users {
		result = append(result, convertUser(user))
	}
	return result, nil
}

func (u *userService) GetUserByName(ctx context.Context, name string) (*model.User, error) {
	// 1. call ORM code generated by SQLBoiler
	user, err := db.Users(
		qm.Select(db.UserTableColumns.ID, db.UserTableColumns.Name),
		db.UserWhere.Name.EQ(name),
	).One(ctx, u.exec)

	// 2. error handling
	if err != nil {
		return nil, err
	}

	// 3. convert to model.User
	return convertUser(user), nil
}

func convertUser(user *db.User) *model.User {
	return &model.User{
		ID:   user.ID,
		Name: user.Name,
	}
}
